diff -u0 -rN /opt/spm12/@file_array/private/init.c /opt/spm12/@file_array/private/init.c
--- /opt/spm12/@file_array/private/init.c	2019-02-13 15:08:28.406551699 +0000
+++ /opt/spm12/@file_array/private/init.c	2019-02-13 14:29:10.748611471 +0000
@@ -16,0 +17,6 @@
+# elif defined(SPM_WIN32)
+#  define structStat struct _stati64
+#  define getFileFstat _fstati64
+#  define getFilePos fgetpos
+#  define setFilePos fsetpos
+#  define fpos_T fpos_t
diff -u0 -rN /opt/spm12/src/Makefile.var /opt/spm12/src/Makefile.var
--- /opt/spm12/src/Makefile.var	2019-02-13 15:08:28.406551699 +0000
+++ /opt/spm12/src/Makefile.var	2019-02-13 14:29:10.748611471 +0000
@@ -80,0 +81,3 @@
+    ifeq (MINGW64,$(word 1,$(subst _, ,$(PLATFORM))))
+      MEXOPTS   += -DSPM_WIN32
+    endif
diff -u0 -rN /opt/spm12/@file_array/private/file2mat.c /opt/spm12/@file_array/private/file2mat.c
--- /opt/spm12/@file_array/private/file2mat.c	2019-02-13 15:08:28.406551699 +0000
+++ /opt/spm12/@file_array/private/file2mat.c	2019-02-13 14:29:10.748611471 +0000
@@ -52 +52 @@
-int page_size()
+static int page_size()
@@ -92 +92 @@
-void get_1(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned char idat[],
+static void get_1(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned char idat[],
@@ -98 +98 @@
-void get_8(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned char idat[],
+static void get_8(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned char idat[],
@@ -115 +115 @@
-void get_16(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned short idat[],
+static void get_16(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned short idat[],
@@ -132 +132 @@
-void get_32(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned int idat[],
+static void get_32(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned int idat[],
@@ -149 +149 @@
-void get_64(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned long long idat[],
+static void get_64(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned long long idat[],
@@ -166 +166 @@
-void get_w8(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned char idat[],
+static void get_w8(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned char idat[],
@@ -188 +188 @@
-void get_w16(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned short idat[],
+static void get_w16(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned short idat[],
@@ -210 +210 @@
-void get_w32(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned int idat[],
+static void get_w32(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned int idat[],
@@ -232 +232 @@
-void get_w64(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned long long idat[],
+static void get_w64(mwSize ndim, mwSize idim[], unsigned long long *iptr[], unsigned long long idat[],
@@ -254 +254 @@
-void swap8(long long n, unsigned char d[])
+static void swap8(long long n, unsigned char d[])
@@ -257 +257 @@
-void swap16(long long n, unsigned char d[])
+static void swap16(long long n, unsigned char d[])
@@ -266 +266 @@
-void swap32(long long n, unsigned char d[])
+static void swap32(long long n, unsigned char d[])
@@ -276 +276 @@
-void swap64(long long n, unsigned char d[])
+static void swap64(long long n, unsigned char d[])
@@ -297 +297 @@
-Dtype table[] = {
+static Dtype table[] = {
@@ -327 +327 @@
-void werror(char *where, DWORD last_error)
+static void werror(char *where, DWORD last_error)
@@ -345 +345 @@
-void werror(char *where, int last_error)
+static void werror(char *where, int last_error)
@@ -355 +355 @@
-void do_unmap_file(MTYPE *map)
+static void do_unmap_file(MTYPE *map)
@@ -373 +373 @@
-const double *getpr(const mxArray *ptr, const char nam[], int len, int *n)
+static const double *getpr(const mxArray *ptr, const char nam[], int len, int *n)
@@ -415 +415 @@
-void do_map_file(const mxArray *ptr, MTYPE *map)
+static void do_map_file(const mxArray *ptr, MTYPE *map)
diff -u0 -rN /opt/spm12/@file_array/private/mat2file.c /opt/spm12/@file_array/private/mat2file.c
--- /opt/spm12/@file_array/private/mat2file.c	2019-02-13 15:08:28.406551699 +0000
+++ /opt/spm12/@file_array/private/mat2file.c	2019-02-13 14:29:10.748611471 +0000
@@ -44 +44 @@
-void swap8(int n, unsigned char id[], unsigned char od[])
+static void swap8(int n, unsigned char id[], unsigned char od[])
@@ -53 +53 @@
-void swap16(int n, unsigned char id[], unsigned char od[])
+static void swap16(int n, unsigned char id[], unsigned char od[])
@@ -62 +62 @@
-void swap32(int n, unsigned char id[], unsigned char od[])
+static void swap32(int n, unsigned char id[], unsigned char od[])
@@ -72 +72 @@
-void swap64(int n, unsigned char id[], unsigned char od[])
+static void swap64(int n, unsigned char id[], unsigned char od[])
@@ -85 +85 @@
-Dtype table[] = {
+static Dtype table[] = {
@@ -108,3 +108,3 @@
-off_t icumprod[MXDIMS], ocumprod[MXDIMS];
-off_t poff;
-long len;
+static off_t icumprod[MXDIMS], ocumprod[MXDIMS];
+static off_t poff;
+static long len;
@@ -112 +112 @@
-unsigned char wbuf[BLEN], *dptr;
+static unsigned char wbuf[BLEN], *dptr;
@@ -114 +114 @@
-void put_bytes(int ndim, FILE *fp, int *ptr[], int idim[], unsigned char idat[], off_t indo, off_t indi, void (*swap)())
+static void put_bytes(int ndim, FILE *fp, int *ptr[], int idim[], unsigned char idat[], off_t indo, off_t indi, void (*swap)())
@@ -157 +157 @@
-void put(FTYPE map, int *ptr[], int idim[], void *idat)
+static void put(FTYPE map, int *ptr[], int idim[], void *idat)
@@ -190 +190 @@
-const double *getpr(const mxArray *ptr, const char nam[], int len, int *n)
+static const double *getpr(const mxArray *ptr, const char nam[], int len, int *n)
@@ -233 +233 @@
-void open_file(const mxArray *ptr, FTYPE *map)
+static void open_file(const mxArray *ptr, FTYPE *map)
@@ -302 +302 @@
-void close_file(FTYPE map)
+static void close_file(FTYPE map)
diff -u0 -rN /opt/spm12/gui_mainfcn.m /opt/spm12/gui_mainfcn.m
--- /opt/spm12/gui_mainfcn.m	1970-01-01 01:00:00.000000000 +0100
+++ /opt/spm12/gui_mainfcn.m	2019-02-13 14:32:14.773074733 +0000
@@ -0,0 +1,45 @@
+function varargout = gui_mainfcn (gui_State, varargin)
+
+  if (numel (varargin) == 0)
+
+    ## Open the figure
+    copies = ifelse (gui_State.gui_Singleton, "reuse", "new");
+    if (! isempty (gui_State.gui_LayoutFcn))
+      F = feval (gui_State.gui_LayoutFcn, copies);
+    else
+      figname = which (gui_State.gui_Name);
+      [p, n]  = fileparts (figname);
+      figname = fullfile (p, n);
+      F       = openfig (figname, copies);
+    endif
+
+    ## Store handles in guidata
+    D = guidata (F);
+    H = guihandles (F);
+    guidata (F, H);
+
+    ## Call gui_OpeningFcn
+    if (! isempty (gui_State.gui_OpeningFcn))
+      feval (gui_State.gui_OpeningFcn, F, [], H);
+    endif
+
+    ## Call gui_OutputFcn
+    H = guidata (F);
+    if (nargout > 0)
+      [varargout{1:nargout}] = feval (gui_State.gui_OutputFcn, F, [], H);
+    else
+      feval (gui_State.gui_OutputFcn, F, [], H);
+    endif
+
+  else
+
+    ## Callbacks
+    if (nargout > 0)
+      [varargout{1:nargout}] = feval (gui_State.gui_Callback, varargin{2:end});
+    else
+      feval (gui_State.gui_Callback, varargin{2:end});
+    endif
+
+  endif
+
+endfunction
diff -u0 -rN /opt/spm12/matlabbatch/private/inputdlg.m /opt/spm12/matlabbatch/private/inputdlg.m
--- /opt/spm12/matlabbatch/private/inputdlg.m	2019-02-13 15:08:28.206551193 +0000
+++ /opt/spm12/matlabbatch/private/inputdlg.m	1970-01-01 01:00:00.000000000 +0100
@@ -1,442 +0,0 @@
-function Answer=inputdlg(Prompt, Title, NumLines, DefAns, Resize)
-%INPUTDLG Input dialog box.
-%  ANSWER = INPUTDLG(PROMPT) creates a modal dialog box that returns user
-%  input for multiple prompts in the cell array ANSWER. PROMPT is a cell
-%  array containing the PROMPT strings.
-%
-%  INPUTDLG uses UIWAIT to suspend execution until the user responds.
-%
-%  ANSWER = INPUTDLG(PROMPT,NAME) specifies the title for the dialog.
-%
-%  ANSWER = INPUTDLG(PROMPT,NAME,NUMLINES) specifies the number of lines for
-%  each answer in NUMLINES. NUMLINES may be a constant value or a column
-%  vector having one element per PROMPT that specifies how many lines per
-%  input field. NUMLINES may also be a matrix where the first column
-%  specifies how many rows for the input field and the second column
-%  specifies how many columns wide the input field should be.
-%
-%  ANSWER = INPUTDLG(PROMPT,NAME,NUMLINES,DEFAULTANSWER) specifies the
-%  default answer to display for each PROMPT. DEFAULTANSWER must contain
-%  the same number of elements as PROMPT and must be a cell array of
-%  strings.
-%
-%  ANSWER = INPUTDLG(PROMPT,NAME,NUMLINES,DEFAULTANSWER,OPTIONS) specifies
-%  additional options. If OPTIONS is the string 'on', the dialog is made
-%  resizable. If OPTIONS is a structure, the fields Resize, WindowStyle, and
-%  Interpreter are recognized. Resize can be either 'on' or
-%  'off'. WindowStyle can be either 'normal' or 'modal'. Interpreter can be
-%  either 'none' or 'tex'. If Interpreter is 'tex', the prompt strings are
-%  rendered using LaTeX.
-%
-%  Examples:
-%
-%  prompt={'Enter the matrix size for x^2:','Enter the colormap name:'};
-%  name='Input for Peaks function';
-%  numlines=1;
-%  defaultanswer={'20','hsv'};
-%
-%  answer=inputdlg(prompt,name,numlines,defaultanswer);
-%
-%  options.Resize='on';
-%  options.WindowStyle='normal';
-%  options.Interpreter='tex';
-%
-%  answer=inputdlg(prompt,name,numlines,defaultanswer,options);
-%
-%  See also DIALOG, ERRORDLG, HELPDLG, LISTDLG, MSGBOX,
-%    QUESTDLG, TEXTWRAP, UIWAIT, WARNDLG .
-
-%  Copyright 1994-2007 The MathWorks, Inc.
-%  $Revision: 6641 $
-
-%%%%%%%%%%%%%%%%%%%%%%%%%
-%%% Handle Input Args %%%
-%%%%%%%%%%%%%%%%%%%%%%%%%
-if nargin<1
-  Prompt='Input:';
-end
-if ~iscell(Prompt)
-  Prompt={Prompt};
-end
-NumQuest=numel(Prompt);
-
-
-if nargin<2,
-  Title=' ';
-end
-
-if nargin<3
-  NumLines=1;
-end
-
-if nargin<4
-  DefAns=cell(NumQuest,1);
-  for lp=1:NumQuest
-    DefAns{lp}='';
-  end
-end
-
-if nargin<5
-  Resize = 'off';
-end
-WindowStyle='modal';
-Interpreter='none';
-
-Options = struct([]); %#ok
-if nargin==5 && isstruct(Resize)
-  Options = Resize;
-  Resize  = 'off';
-  if isfield(Options,'Resize'),      Resize=Options.Resize;           end
-  if isfield(Options,'WindowStyle'), WindowStyle=Options.WindowStyle; end
-  if isfield(Options,'Interpreter'), Interpreter=Options.Interpreter; end
-end
-
-[rw,cl]=size(NumLines);
-OneVect = ones(NumQuest,1);
-if (rw == 1 & cl == 2) %#ok Handle []
-  NumLines=NumLines(OneVect,:);
-elseif (rw == 1 & cl == 1) %#ok
-  NumLines=NumLines(OneVect);
-elseif (rw == 1 & cl == NumQuest) %#ok
-  NumLines = NumLines';
-elseif (rw ~= NumQuest | cl > 2) %#ok
-  cfg_message('MATLAB:inputdlg:IncorrectSize', 'NumLines size is incorrect.')
-end
-
-if ~iscell(DefAns),
-  cfg_message('MATLAB:inputdlg:InvalidDefaultAnswer', 'Default Answer must be a cell array of strings.');
-end
-
-%%%%%%%%%%%%%%%%%%%%%%%
-%%% Create InputFig %%%
-%%%%%%%%%%%%%%%%%%%%%%%
-FigWidth=175;
-FigHeight=100;
-FigPos(3:4)=[FigWidth FigHeight];  %#ok
-FigColor=get(0,'DefaultUicontrolBackgroundcolor');
-
-InputFig=dialog(                     ...
-  'Visible'          ,'off'      , ...
-  'KeyPressFcn'      ,@doFigureKeyPress, ...
-  'Name'             ,Title      , ...
-  'Pointer'          ,'arrow'    , ...
-  'Units'            ,'pixels'   , ...
-  'UserData'         ,'Cancel'   , ...
-  'Tag'              ,Title      , ...
-  'HandleVisibility' ,'callback' , ...
-  'Color'            ,FigColor   , ...
-  'NextPlot'         ,'add'      , ...
-  'WindowStyle'      ,WindowStyle, ...
-  'DoubleBuffer'     ,'on'       , ...
-  'Resize'           ,Resize       ...
-  );
-
-
-%%%%%%%%%%%%%%%%%%%%%
-%%% Set Positions %%%
-%%%%%%%%%%%%%%%%%%%%%
-DefOffset    = 5;
-DefBtnWidth  = 53;
-DefBtnHeight = 23;
-
-TextInfo.Units              = 'pixels'   ;
-TextInfo.FontSize           = get(0,'FactoryUIControlFontSize');
-TextInfo.FontWeight         = get(InputFig,'DefaultTextFontWeight');
-TextInfo.HorizontalAlignment= 'left'     ;
-TextInfo.HandleVisibility   = 'callback' ;
-
-StInfo=TextInfo;
-StInfo.Style              = 'text'  ;
-StInfo.BackgroundColor    = FigColor;
-
-
-EdInfo=StInfo;
-EdInfo.FontWeight      = get(InputFig,'DefaultUicontrolFontWeight');
-EdInfo.Style           = 'edit';
-EdInfo.BackgroundColor = 'white';
-
-BtnInfo=StInfo;
-BtnInfo.FontWeight          = get(InputFig,'DefaultUicontrolFontWeight');
-BtnInfo.Style               = 'pushbutton';
-BtnInfo.HorizontalAlignment = 'center';
-
-% Add VerticalAlignment here as it is not applicable to the above.
-TextInfo.VerticalAlignment  = 'bottom';
-TextInfo.Color              = get(0,'FactoryUIControlForegroundColor');
-
-
-% adjust button height and width
-btnMargin=1.4;
-ExtControl=uicontrol(InputFig   ,BtnInfo     , ...
-  'String'   ,'OK'        , ...
-  'Visible'  ,'off'         ...
-  );
-
-% BtnYOffset  = DefOffset;
-BtnExtent = get(ExtControl,'Extent');
-BtnWidth  = max(DefBtnWidth,BtnExtent(3)+8);
-BtnHeight = max(DefBtnHeight,BtnExtent(4)*btnMargin);
-delete(ExtControl);
-
-% Determine # of lines for all Prompts
-TxtWidth=FigWidth-2*DefOffset;
-ExtControl=uicontrol(InputFig   ,StInfo     , ...
-  'String'   ,''         , ...
-  'Position' ,[ DefOffset DefOffset 0.96*TxtWidth BtnHeight ] , ...
-  'Visible'  ,'off'        ...
-  );
-
-WrapQuest=cell(NumQuest,1);
-QuestPos=zeros(NumQuest,4);
-
-for ExtLp=1:NumQuest
-  if size(NumLines,2)==2
-    [WrapQuest{ExtLp},QuestPos(ExtLp,1:4)]= ...
-      textwrap(ExtControl,Prompt(ExtLp),NumLines(ExtLp,2));
-  else
-    [WrapQuest{ExtLp},QuestPos(ExtLp,1:4)]= ...
-      textwrap(ExtControl,Prompt(ExtLp),80);
-  end
-end % for ExtLp
-
-delete(ExtControl);
-QuestWidth =QuestPos(:,3);
-QuestHeight=QuestPos(:,4);
-
-TxtHeight=QuestHeight(1)/size(WrapQuest{1,1},1);
-EditHeight=TxtHeight*NumLines(:,1);
-EditHeight(NumLines(:,1)==1)=EditHeight(NumLines(:,1)==1)+4;
-
-FigHeight=(NumQuest+2)*DefOffset    + ...
-  BtnHeight+sum(EditHeight) + ...
-  sum(QuestHeight);
-
-TxtXOffset=DefOffset;
-
-QuestYOffset=zeros(NumQuest,1);
-EditYOffset=zeros(NumQuest,1);
-QuestYOffset(1)=FigHeight-DefOffset-QuestHeight(1);
-EditYOffset(1)=QuestYOffset(1)-EditHeight(1);
-
-for YOffLp=2:NumQuest,
-  QuestYOffset(YOffLp)=EditYOffset(YOffLp-1)-QuestHeight(YOffLp)-DefOffset;
-  EditYOffset(YOffLp)=QuestYOffset(YOffLp)-EditHeight(YOffLp);
-end % for YOffLp
-
-QuestHandle=[]; %#ok
-EditHandle=[];
-
-AxesHandle=axes('Parent',InputFig,'Position',[0 0 1 1],'Visible','off');
-
-inputWidthSpecified = false;
-
-lfont = cfg_get_defaults('cfg_ui.lfont');
-
-for lp=1:NumQuest,
-  if ~ischar(DefAns{lp}),
-    delete(InputFig);
-    %cfg_message('Default Answer must be a cell array of strings.');
-    cfg_message('MATLAB:inputdlg:InvalidInput', 'Default Answer must be a cell array of strings.');
-  end
-
-  EditHandle(lp)=uicontrol(InputFig    , ...
-    EdInfo      , ...
-    'Max'        ,NumLines(lp,1)       , ...
-    'Position'   ,[ TxtXOffset EditYOffset(lp) TxtWidth EditHeight(lp) ], ...
-    'String'     ,DefAns{lp}           , ...
-    'Tag'        ,'Edit'               , ...
-    lfont{:});
-
-  QuestHandle(lp)=text('Parent'     ,AxesHandle, ...
-    TextInfo     , ...
-    'Position'   ,[ TxtXOffset QuestYOffset(lp)], ...
-    'String'     ,WrapQuest{lp}                 , ...
-    'Interpreter',Interpreter                   , ...
-    'Tag'        ,'Quest'                         ...
-    );
-
-  MinWidth = max(QuestWidth(:));
-  if (size(NumLines,2) == 2)
-    % input field width has been specified.
-    inputWidthSpecified = true;
-    EditWidth = setcolumnwidth(EditHandle(lp), NumLines(lp,1), NumLines(lp,2));
-    MinWidth = max(MinWidth, EditWidth);
-  end
-  FigWidth=max(FigWidth, MinWidth+2*DefOffset);
-
-end % for lp
-
-% fig width may have changed, update the edit fields if they dont have user specified widths.
-if ~inputWidthSpecified
-  TxtWidth=FigWidth-2*DefOffset;
-  for lp=1:NumQuest
-    set(EditHandle(lp), 'Position', [TxtXOffset EditYOffset(lp) TxtWidth EditHeight(lp)]);
-  end
-end
-
-FigPos=get(InputFig,'Position');
-
-FigWidth=max(FigWidth,2*(BtnWidth+DefOffset)+DefOffset);
-FigPos(1)=0;
-FigPos(2)=0;
-FigPos(3)=FigWidth;
-FigPos(4)=FigHeight;
-
-set(InputFig,'Position',getnicedialoglocation(FigPos,get(InputFig,'Units')));
-
-OKHandle=uicontrol(InputFig     ,              ...
-  BtnInfo      , ...
-  'Position'   ,[ FigWidth-2*BtnWidth-2*DefOffset DefOffset BtnWidth BtnHeight ] , ...
-  'KeyPressFcn',@doControlKeyPress , ...
-  'String'     ,'OK'        , ...
-  'Callback'   ,@doCallback , ...
-  'Tag'        ,'OK'        , ...
-  'UserData'   ,'OK'          ...
-  );
-
-setdefaultbutton(InputFig, OKHandle);
-
-CancelHandle=uicontrol(InputFig     ,              ...
-  BtnInfo      , ...
-  'Position'   ,[ FigWidth-BtnWidth-DefOffset DefOffset BtnWidth BtnHeight ]           , ...
-  'KeyPressFcn',@doControlKeyPress            , ...
-  'String'     ,'Cancel'    , ...
-  'Callback'   ,@doCallback , ...
-  'Tag'        ,'Cancel'    , ...
-  'UserData'   ,'Cancel'      ...
-  ); %#ok
-
-handles = guihandles(InputFig);
-handles.MinFigWidth = FigWidth;
-handles.FigHeight   = FigHeight;
-handles.TextMargin  = 2*DefOffset;
-guidata(InputFig,handles);
-set(InputFig,'ResizeFcn', {@doResize, inputWidthSpecified});
-
-% make sure we are on screen
-movegui(InputFig)
-
-% if there is a figure out there and it's modal, we need to be modal too
-if ~isempty(gcbf) && strcmp(get(gcbf,'WindowStyle'),'modal')
-  set(InputFig,'WindowStyle','modal');
-end
-
-set(InputFig,'Visible','on');
-drawnow;
-
-if ~isempty(EditHandle)
-  uicontrol(EditHandle(1));
-end
-
-if ishandle(InputFig)
-  % Go into uiwait if the figure handle is still valid.
-  % This is mostly the case during regular use.
-  uiwait(InputFig);
-end
-
-% Check handle validity again since we may be out of uiwait because the
-% figure was deleted.
-if ishandle(InputFig)
-  Answer={};
-  if strcmp(get(InputFig,'UserData'),'OK'),
-    Answer=cell(NumQuest,1);
-    for lp=1:NumQuest,
-      Answer(lp)=get(EditHandle(lp),{'String'});
-    end
-  end
-  delete(InputFig);
-else
-  Answer={};
-end
-
-function doFigureKeyPress(obj, evd) %#ok
-switch(evd.Key)
-  case {'return','space'}
-    set(gcbf,'UserData','OK');
-    uiresume(gcbf);
-  case {'escape'}
-    delete(gcbf);
-end
-
-function doControlKeyPress(obj, evd) %#ok
-switch(evd.Key)
-  case {'return'}
-    if ~strcmp(get(obj,'UserData'),'Cancel')
-      set(gcbf,'UserData','OK');
-      uiresume(gcbf);
-    else
-      delete(gcbf)
-    end
-  case 'escape'
-    delete(gcbf)
-end
-
-function doCallback(obj, evd) %#ok
-if ~strcmp(get(obj,'UserData'),'Cancel')
-  set(gcbf,'UserData','OK');
-  uiresume(gcbf);
-else
-  delete(gcbf)
-end
-
-function doResize(FigHandle, evd, multicolumn) %#ok
-% TBD: Check difference in behavior w/ R13. May need to implement
-% additional resize behavior/clean up.
-
-Data=guidata(FigHandle);
-
-resetPos = false;
-
-FigPos = get(FigHandle,'Position');
-FigWidth = FigPos(3);
-FigHeight = FigPos(4);
-
-if FigWidth < Data.MinFigWidth
-  FigWidth  = Data.MinFigWidth;
-  FigPos(3) = Data.MinFigWidth;
-  resetPos = true;
-end
-
-% make sure edit fields use all available space if
-% number of columns is not specified in dialog creation.
-if ~multicolumn
-  for lp = 1:length(Data.Edit)
-    EditPos = get(Data.Edit(lp),'Position');
-    EditPos(3) = FigWidth - Data.TextMargin;
-    set(Data.Edit(lp),'Position',EditPos);
-  end
-end
-
-if FigHeight ~= Data.FigHeight
-  FigPos(4) = Data.FigHeight;
-  resetPos = true;
-end
-
-if resetPos
-  set(FigHandle,'Position',FigPos);
-end
-
-
-% set pixel width given the number of columns
-function EditWidth = setcolumnwidth(object, rows, cols)
-% Save current Units and String.
-old_units = get(object, 'Units');
-old_string = get(object, 'String');
-old_position = get(object, 'Position');
-
-set(object, 'Units', 'pixels')
-set(object, 'String', char(ones(1,cols)*'x'));
-
-new_extent = get(object,'Extent');
-if (rows > 1)
-  % For multiple rows, allow space for the scrollbar
-  new_extent = new_extent + 19; % Width of the scrollbar
-end
-new_position = old_position;
-new_position(3) = new_extent(3) + 1;
-set(object, 'Position', new_position);
-
-% reset string and units
-set(object, 'String', old_string, 'Units', old_units);
-
-EditWidth = new_extent(3);
diff -u0 -rN /opt/spm12/matlabbatch/private/listdlg.m /opt/spm12/matlabbatch/private/listdlg.m
--- /opt/spm12/matlabbatch/private/listdlg.m	2019-02-13 15:08:28.202551183 +0000
+++ /opt/spm12/matlabbatch/private/listdlg.m	1970-01-01 01:00:00.000000000 +0100
@@ -1,265 +0,0 @@
-function [selection,value] = listdlg(varargin)
-%LISTDLG  List selection dialog box.
-%   [SELECTION,OK] = LISTDLG('ListString',S) creates a modal dialog box
-%   which allows you to select a string or multiple strings from a list.
-%   SELECTION is a vector of indices of the selected strings (length 1 in
-%   the single selection mode).  This will be [] when OK is 0.  OK is 1 if
-%   you push the OK button, or 0 if you push the Cancel button or close the
-%   figure.
-%
-%   Double-clicking on an item or pressing <CR> when multiple items are
-%   selected has the same effect as clicking the OK button.  Pressing <CR>
-%   is the same as clicking the OK button. Pressing <ESC> is the same as
-%   clicking the Cancel button.
-%
-%   Inputs are in parameter,value pairs:
-%
-%   Parameter       Description
-%   'ListString'    cell array of strings for the list box.
-%   'SelectionMode' string; can be 'single' or 'multiple'; defaults to
-%                   'multiple'.
-%   'ListSize'      minimum [width height] of listbox in pixels; defaults
-%                   to [160 300]. The maximum [width height] is fixed to
-%                   [800 600].
-%   'InitialValue'  vector of indices of which items of the list box
-%                   are initially selected; defaults to the first item.
-%   'Name'          String for the figure's title; defaults to ''.
-%   'PromptString'  string matrix or cell array of strings which appears 
-%                   as text above the list box; defaults to {}.
-%   'OKString'      string for the OK button; defaults to 'OK'.
-%   'CancelString'  string for the Cancel button; defaults to 'Cancel'.
-%
-%   A 'Select all' button is provided in the multiple selection case.
-%
-%   Example:
-%     d = dir;
-%     str = {d.name};
-%     [s,v] = listdlg('PromptString','Select a file:',...
-%                     'SelectionMode','single',...
-%                     'ListString',str)
- %
-%  See also DIALOG, ERRORDLG, HELPDLG, INPUTDLG,
-%    MSGBOX, QUESTDLG, WARNDLG.
-
-%   Copyright 1984-2005 The MathWorks, Inc.
-%   $Revision: 6641 $  $Date: 2005/10/28 15:54:55 $
-
-%   'uh'            uicontrol button height, in pixels; default = 22.
-%   'fus'           frame/uicontrol spacing, in pixels; default = 8.
-%   'ffs'           frame/figure spacing, in pixels; default = 8.
-
-% simple test:
-%
-% d = dir; [s,v] = listdlg('PromptString','Select a file:','ListString',{d.name});
-% 
-
-figname = '';
-smode = 2;   % (multiple)
-promptstring = {};
-liststring = [];
-listsize = [160 300];
-initialvalue = [];
-okstring = 'OK';
-cancelstring = 'Cancel';
-fus = 8;
-ffs = 8;
-uh = 22;
-
-if mod(length(varargin),2) ~= 0
-    % input args have not com in pairs, woe is me
-    cfg_message('MATLAB:listdlg:InvalidArgument', 'Arguments to LISTDLG must come param/value in pairs.')
-end
-for i=1:2:length(varargin)
-    switch lower(varargin{i})
-     case 'name'
-      figname = varargin{i+1};
-     case 'promptstring'
-      promptstring = varargin{i+1};
-     case 'selectionmode'
-      switch lower(varargin{i+1})
-       case 'single'
-        smode = 1;
-       case 'multiple'
-        smode = 2;
-      end
-     case 'listsize'
-      listsize = varargin{i+1};
-     case 'liststring'
-      liststring = varargin{i+1};
-     case 'initialvalue'
-      initialvalue = varargin{i+1};
-     case 'uh'
-      uh = varargin{i+1};
-     case 'fus'
-      fus = varargin{i+1};
-     case 'ffs'
-      ffs = varargin{i+1};
-     case 'okstring'
-      okstring = varargin{i+1};
-     case 'cancelstring'
-      cancelstring = varargin{i+1};
-     otherwise
-      cfg_message('MATLAB:listdlg:UnknownParameter', ['Unknown parameter name passed to LISTDLG.  Name was ' varargin{i}])
-    end
-end
-
-if ischar(promptstring)
-    promptstring = cellstr(promptstring); 
-end
-
-if isempty(initialvalue)
-    initialvalue = 1;
-end
-
-if isempty(liststring)
-    cfg_message('MATLAB:listdlg:NeedParameter', 'ListString parameter is required.')
-end
-
-liststring=cellstr(liststring);
-lfont = cfg_get_defaults('cfg_ui.lfont');
-bfont = cfg_get_defaults('cfg_ui.bfont');
-tmpObj = uicontrol('style','listbox',...
-    'max',100,...
-    'Visible','off',...
-    lfont{:});
-lext = cfg_maxextent(tmpObj, liststring);
-ex = get(tmpObj,'Extent');
-ex = ex(4);
-delete(tmpObj);
-listsize = min([800 600],max(listsize, [max(lext)+16, ex*numel(liststring)]));
-
-fp = get(0,'defaultfigureposition');
-w = 2*(fus+ffs)+listsize(1);
-h = 2*ffs+6*fus+ex*length(promptstring)+listsize(2)+uh+(smode==2)*(fus+uh);
-fp = [fp(1) fp(2)+fp(4)-h w h];  % keep upper left corner fixed
-
-fig_props = { ...
-    'name'                   figname ...
-    'color'                  get(0,'defaultUicontrolBackgroundColor') ...
-    'resize'                 'off' ...
-    'numbertitle'            'off' ...
-    'menubar'                'none' ...
-    'windowstyle'            'modal' ...
-    'visible'                'off' ...
-    'createfcn'              ''    ...
-    'position'               fp   ...
-    'closerequestfcn'        'delete(gcbf)' ...
-            };
-
-fig = figure(fig_props{:});
-
-if ~isempty(promptstring)
-    prompt_text = uicontrol('style','text','string',promptstring,...
-        'horizontalalignment','left',...
-        'position',[ffs+fus fp(4)-(ffs+fus+ex*length(promptstring)) ...
-        listsize(1) ex*length(promptstring)]); %#ok
-end
-
-btn_wid = (fp(3)-2*(ffs+fus)-fus)/2;
-
-listbox = uicontrol('style','listbox',...
-                    'position',[ffs+fus ffs+uh+4*fus+(smode==2)*(fus+uh) listsize],...
-                    'string',liststring,...
-                    'backgroundcolor','w',...
-                    'max',smode,...
-                    'tag','listbox',...
-                    'value',initialvalue, ...
-                    'callback', {@doListboxClick}, ...
-                    lfont{:});
-
-ok_btn = uicontrol('style','pushbutton',...
-                   'string',okstring,...
-                   'position',[ffs+fus ffs+fus btn_wid uh],...
-                   'callback',{@doOK,listbox},...
-                   bfont{:});
-
-cancel_btn = uicontrol('style','pushbutton',...
-                       'string',cancelstring,...
-                       'position',[ffs+2*fus+btn_wid ffs+fus btn_wid uh],...
-                       'callback',{@doCancel,listbox},...
-                       bfont{:});
-
-if smode == 2
-    selectall_btn = uicontrol('style','pushbutton',...
-                              'string','Select all',...
-                              'position',[ffs+fus 4*fus+ffs+uh listsize(1) uh],...
-                              'tag','selectall_btn',...
-                              'callback',{@doSelectAll, listbox});
-
-    if length(initialvalue) == length(liststring)
-        set(selectall_btn,'enable','off')
-    end
-    set(listbox,'callback',{@doListboxClick, selectall_btn})
-end
-
-set([fig, ok_btn, cancel_btn, listbox], 'keypressfcn', {@doKeypress, listbox});
-
-set(fig,'position',getnicedialoglocation(fp, get(fig,'Units')));
-% Make ok_btn the default button.
-setdefaultbutton(fig, ok_btn);
-
-% make sure we are on screen
-movegui(fig)
-set(fig, 'visible','on'); drawnow;
-
-try
-    % Give default focus to the listbox *after* the figure is made visible
-    uicontrol(listbox);
-    uiwait(fig);
-catch
-    if ishandle(fig)
-        delete(fig)
-    end
-end
-
-if isappdata(0,'ListDialogAppData__')
-    ad = getappdata(0,'ListDialogAppData__');
-    selection = ad.selection;
-    value = ad.value;
-    rmappdata(0,'ListDialogAppData__')
-else
-    % figure was deleted
-    selection = [];
-    value = 0;
-end
-
-%% figure, OK and Cancel KeyPressFcn
-function doKeypress(src, evd, listbox) %#ok
-switch evd.Key
- case 'escape'
-  doCancel([],[],listbox);
-end
-
-%% OK callback
-function doOK(ok_btn, evd, listbox) %#ok
-if (~isappdata(0, 'ListDialogAppData__'))
-    ad.value = 1;
-    ad.selection = get(listbox,'value');
-    setappdata(0,'ListDialogAppData__',ad);
-    delete(gcbf);
-end
-
-%% Cancel callback
-function doCancel(cancel_btn, evd, listbox) %#ok
-ad.value = 0;
-ad.selection = [];
-setappdata(0,'ListDialogAppData__',ad)
-delete(gcbf);
-
-%% SelectAll callback
-function doSelectAll(selectall_btn, evd, listbox) %#ok
-set(selectall_btn,'enable','off')
-set(listbox,'value',1:length(get(listbox,'string')));
-
-%% Listbox callback
-function doListboxClick(listbox, evd, selectall_btn) %#ok
-% if this is a doubleclick, doOK
-if strcmp(get(gcbf,'SelectionType'),'open')
-    doOK([],[],listbox);
-elseif nargin == 3
-    if length(get(listbox,'string'))==length(get(listbox,'value'))
-        set(selectall_btn,'enable','off')
-    else
-        set(selectall_btn,'enable','on')
-    end
-end
